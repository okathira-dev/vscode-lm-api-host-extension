---
description: 
globs: *.md
alwaysApply: false
---
# ドキュメントファイル編集ルール

## ファイル更新・編集方針

1. コード変更時のドキュメント管理
   - コードの編集時には必ず対応するドキュメントファイル（`docs/`ディレクトリ内）を更新すること
   - ファイルの概要は以下の通り：
     - [coding-rules.md](mdc:docs/coding-rules.md): コーディングルールやベストプラクティス
     - [implementation-plan.md](mdc:docs/implementation-plan.md): 実装計画や方針、技術的決定事項の記録
     - [progress-tracker.md](mdc:docs/progress-tracker.md): 進捗状況や課題の追跡
     - [specifications.md](mdc:docs/specifications.md): 仕様の変更や追加
     - [user-guide.md](mdc:docs/user-guide.md): ユーザー向け機能の説明

2. 進捗管理の方針
   - Gitで管理するため、変更を記すマーカー `（改訂版)` や日時などは記載しない
   - 実装の各フェーズで関連するドキュメントを更新
   - 技術的決定事項は `implementation-plan.md` の関連セクションに記録
   - 進捗状況は `progress-tracker.md` のみで管理
   - 仕様変更は `specifications.md` に即時反映
   - 実装する前に具体的なコードは記載しない

3. ドキュメント更新のタイミング
   - 新機能の追加時
   - バグ修正時
   - 仕様変更時
   - 実装方針の変更時
   - マイルストーン達成時

4. 進捗情報の記録内容
   - 実装完了した機能
   - 発生した技術的課題
   - 次のステップの計画
   - リスクと対策

5. レビュー時の確認事項
   - コード変更に対応するドキュメント更新の有無
   - 進捗情報の正確な記録
   - 技術的決定事項の明確な記載
   - ユーザー向けドキュメントの更新

## マークダウン規約

- マークダウンのコードブロックの入れ子構造を使用しない
  - 特に理由がない限り、コードブロック内にさらにコードブロックを配置しない
  - 必要な場合は、別々のコードブロックに分ける
  - コードブロックの中にコード例を含める必要がある場合は、インライン記法または文字列としてエスケープする
- マークダウンファイルはmarkdownlintに準拠するように作成する
- markdownlintに準拠するように作成されたフォーマットは変更しない
- 見出しレベルは適切な階層構造を維持する
  - 飛び級の見出しレベル（例：`#` の次に `###`）は避ける
  - 各セクションの下位セクションは一段階下のレベルにする（例：`##` の下は `###`）
- コードブロックの前後には空行を入れる
- リスト項目のインデントは一貫性を保つ
  - リスト項目内のコードブロックは4スペースでインデントする
  - リストの子項目は親項目より2スペース多くインデントする
  - リスト項目の後に続く段落やコードブロックは、リスト項目と同じインデントレベルを維持するために4スペースのインデントを追加する
- 表は整形して作成し、ヘッダー行とデータ行の区切り線を適切に配置する

### リスト内のコードブロック例

正しい例：

```markdown
1. 最初の手順を実行します

    ```powershell
    Get-ChildItem -Path C:\Example
    ```

2. 次の手順を実行します

    ```powershell
    New-Item -Path C:\Example\NewFile.txt -ItemType File
    ```
```

間違った例：

```markdown
1. 最初の手順を実行します

```powershell
Get-ChildItem -Path C:\Example
```

2. 次の手順を実行します

```powershell
New-Item -Path C:\Example\NewFile.txt -ItemType File
```
```

